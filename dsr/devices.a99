; DSR Notes:
; --
; Available WP Registers: R0-R10
;  R11 == Return address
;  R12 == CRUBASE of current device
; Available Scratchpad: >834A - >836D (inclusive) (except?? >8354 and >8356 are preset to locate PAB in VDP)

; This will be all about interacting with PABs in VDP and IO to the Raspberry PI

; So, PAB: Appears to be handed off in a fixed address in scratchpad. The DSR must work backwards from the end.
PABNAM	EQU	>8356		; Address in VDP of Device Name
PABNLE	EQU	>8354		; Length of name (?only trust the LSB?)
PABCNT	EQU	>000A		; PAB begins 10 bytes before the name length
; PAB begins at VDP address pointed to by: @>8356 - @>8354 - >0A

; There is room in PAD for the 10 byte header at FAC
PAD	EQU	->E0		; Beginning of scratchpad ram
FAC	EQU	PAD+>4A		; 36 bytes available to DSR We'll copy the PAB header here.
OPCODE	EQU	FAC+>0		; PAB - location of opcode after copied
FLGSTS	EQU	FAC+>1		; PAB - [blah][blah]
BUFADR	EQU	FAC+>2		; PAB - address of read or write buffer
LRECLN	EQU	FAC+>4		; PAB - logical record length
CHRCNT	EQU	FAC+>5		; PAB - character count
RECNUM	EQU	FAC+>6		; PAB - record number
SCNOFF	EQU	FAC+>8		; PAB - screen offset
OPTLEN	EQU	FAC+>9		; PAB - option length
DEVLEN	EQU	FAC+>10		; PAB - device length
;  I doubt I should use this- 
PABVDP	EQU	FAC+>12		; PAB - Pointer to PAB in VDP RAM


; Error codes - RPi will return one of these or SUCCESS after evaluating PAB and device name.
EDVNAME	EQU	>00		; Bad device name
EWPROT	EQU	>01		; Device write protected
EOPATTR	EQU	>02		; Bad open attribute
EILLOP	EQU	>03		; Illegal Operation
ENOSPAC	EQU	>04		; Out of table/buffer space
EEOF	EQU	>05		; Attempt to read past eof
EDEVERR	EQU	>06		; Any device failure
EFILERR	EQU	>07		; Any file failure

; Success code
SUCCESS	EQU	>FF		; Returned from RPi if PAB will be handled.

; Macros
; Function calling support, such as a alt return address
RET	EQU	>836D		; stash place for previous R11:  MOV R11,@RET   BL tipirst  MOV @RET,R11

; Pattern of Register Usage - 
;  R15 - VDPWA
;  R10 - Base address of Workspace, many EQUs are relative to R10

; store R11, and restore it around BL instruction , clobbers R0
	.defm callsub
	LI	R0,#1
	MOV	R11,@RET
	BL	*R0
	MOV	@RET,R11
	.endm


; TIPI Signal Constants
TSRSET	EQU	>0100		; Reset SYN value
TSWB	EQU	>0200		; Write Byte SYN value
TSRB	EQU	>0600		; Read Byte SYN value
TSACKM	EQU	>0300		; ACK Mask

; TIPI Read Byte - value returned in R1 LSB, not really designed for looping...
readbyte
	LI	R0,TSRB
	MOVB	R0,@TCOUT	; request a byte
	ANDI	R0,TSACKM
!	CB	@RCIN,R0	; wait for ack
	.ifndef	emulation
	JNE	-!
	.endif
	MOVB	@RDIN,R1	; read the data
	SRL	R1,8
	RT

; TIPI Reset
tipirst
	LI	R0,TSRSET
	MOVB	R0,@TCOUT	; send reset signal
!	CB	@RCIN,R0	; wait for ack
	.ifndef emulation
	JNE	-!
	.endif
	RT
	
; TIPI Send PAB
tipispab
	LI	R0,TSWB		; R0 will be SYN and expected ACK for writing
	LI	R1,>0A		; PAB is 10 bytes
	MOV	R10,R2		; R@ is index into PAB in scratchpad
!	MOVB	@FAC(R2),@TDOUT	; set data 
	MOVB	R0,@TCOUT	; signal data available
!	CB	@RCIN,R0	; check for ack
	.ifndef emulation
	JNE	-!
	.endif
	AI	R0,>0100
	ANDI	R0,TSACKM	; rotate alternate syn bit.
	ORI	R0,TSWB
	INC	R2		; idx++
	DEC	R1		; count--
	JNE	-!!
	RT

; TIPI Send device/filename
tipisdev
	LI	R0,TSWB		; R0 will be SYN and expected ACK for writing
	MOV	@PABNAM,R9	; Begin computing beginning of PAB device name
	S	@PABNLE,R9	;   rewind to beginning of device name (might need to only consume the LSB of PABNLE
	DEC	R9		;   and back one more to get full device name length
	SWPB	R9
	MOVB	R9,@VDPWA
	SWPB	R9
	MOVB	R9,@VDPWA
	MOVB	@VDPRD,R1	; Initialize character counter
	SRL	R1,8		;   just a byte

!       MOVB    @VDPRD,@TDOUT	; send byte from vdp
	MOVB	R0,@TCOUT	; singal data available
!	CB	@RCIN,R0	; check for ack
	.ifndef emulation
	JNE	-!
	.endif
	AI	R0,>0100	; rotate alternate syn bit.
	ANDI	R0,TSACKM
	ORI	R0,TSWB
	DEC	R1		; count--
	JNE	-!!
	RT

; Handle requests to TIPI device
tipidsr
	LIMI	0		; Disable interrupts
	STWP	R10		; PAB equates are relative to R10, don't mess with R10

	.callsub tipirst	; a base level handshake to get on the same page as the RPi.

	LI	R4,PABNAM	; Begin computing beginning of PAB
	CLR	R9
	A	*R4,R9
	S	@PABNLE,R9	;   rewind to beginning of device name
	LI	R2,>0A
	S	R2,R9		;   rewind over PAB header
; NOW R9 == V@PAB - beginning of VDP PAB, we will preserve that.


; Set VDP to read from beginning of PAB that is now in R0 and copy to FAC
	SWPB	R9		;   have to write LSB first
	MOVB	R9,*R15		;   store
	SWPB	R9		;   next up MSB
	MOVB	R9,*R15		;   store
	LI	R1,>0A		; while r1 ne 0; do
	MOV	R10,R2		;   R2 will be index relative to FAC
!	MOVB	@VDPRD,@FAC(R2)	;   load FAC from PAB in vdp
	INC	R2		;   inc index... 
	DEC	R1		;   r1 is our loop counter
	JNE	-!		;   copy more bytes if R1 is not 0

; Send request to RPi
	.callsub tipispab
	.callsub tipirst
	.callsub tipisdev
        
; Handle result
	.callsub tipirst
	.callsub readbyte	; Get initial response from RPi (code will be in R1)
	CI	R1,EDVNAME	; If device name error ( such as we don't handle it )
	JEQ	tipipass
	CI	R1,SUCCESS	; If not success, we'll pass the code back to the PAB
	JNE	reterr

; RPi thinks it can handle this request :) Good news!
	LI	R1,EEOF		; Lets just fall through with an EOF error for now...


; Exit and return an error status back to OS, status expected in R1
reterr
	SRC	R1,3		;   move status to top 3 bits.
	SOCB	@FLGSTS(R10),R1	;   merge with file flags so we don't overwrite them
	MOV	R9,R3		;   compose the address of status byte
	INC	R3		;   second byte in PAB
	SWPB	R3		; set vdp write address
	MOVB	R3,*R15
	SWPB	R3
	ORI	R3,VDWRITE	; set write address flag to avoid extra increment.
	MOVB	R3,*R15
	MOVB	R1,@VDPWD	;   write the status byte

; Return handled status with PAB updated
tipiok
	INCT	R11		; increment 2, and then fall through
; Return without handling device
tipipass
	CLR	R0		; clean up output latches before we go.
	MOVB	R0,@TDOUT
	MOVB	R0,@TCOUT
	LIMI	2		; re-enable interrupts
	RT			; return to console

; freeze here for debugging.
lockup
	JMP	lockup

